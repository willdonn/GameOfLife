package Board;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

public class BoardModel {

	
	private List<List<CellPanel>> board;
	private List<List<Boolean>> nextState;
	private Map<Position,CellModel> releventCells;
	
	private int width;
	private int height;
	private int speed = 5;
	private int time = 0;
	
	public BoardModel(int width, int height) {
		this.width = width;
		this.height = height;
		initBoard();
	}
	
	private void initBoard() {
		board = new ArrayList<List<CellPanel>>();
		nextState = new ArrayList<List<Boolean>>();
		releventCells = new Hashtable<Position,CellModel>();
		for (int y = 0; y < height; y++) {
			ArrayList<CellPanel> boardRow = new ArrayList<CellPanel>();
			ArrayList<Boolean> stateRow = new ArrayList<Boolean>();
			for (int x = 0; x < width; x++) {
				boardRow.add(new CellPanel(new Position(x, y)));
				stateRow.add(false);
			}
			board.add(boardRow);
			nextState.add(stateRow);
		}
	}
	
	public int getHeight() {
		// TODO Auto-generated method stub
		return height;
	}

	public int getWidth() {
		// TODO Auto-generated method stub
		return width;
	}
	
	public List<List<CellPanel>> getBoard(){
		return board;
	}

	public void reset() {
		for (int x = 0; x < width; x++) {
			for (int y = 0; y < height; y++) {
				board.get(y).get(x).getModel().setAlive(false);
			}
		}
		time = 0;
	}
	
	private Boolean getNextState(CellModel cell) {
		
		int neighbors = 0;
		Position position = cell.getPosition();
		
		if (position.x - 1 >= 0) {
			int xPos = position.x-1;
			if (board.get(position.y).get(xPos).getModel().isAlive())
				neighbors++;
			
			if (position.y - 1 >= 0) 
				if (board.get(position.y-1).get(xPos).getModel().isAlive())
					neighbors++;
				
			if (position.y + 1 < height)
				if (board.get(position.y+1).get(xPos).getModel().isAlive())
					neighbors++;		
		}
		
		if (position.x+1 < width) {
			int xPos = position.x+1;
			if (board.get(position.y).get(xPos).getModel().isAlive())
				neighbors++;
			if (position.y - 1 >= 0) {
				if (board.get(position.y-1).get(xPos).getModel().isAlive())
					neighbors++;
			}
			if (position.y + 1 < height)
				if (board.get(position.y+1).get(xPos).getModel().isAlive())
					neighbors++;
		}
		
		if (position.y - 1 >= 0) 
			if (board.get(position.y-1).get(position.x).getModel().isAlive())
				neighbors++;
		
		if (position.y + 1 < height) 
			if (board.get(position.y+1).get(position.x).getModel().isAlive())
				neighbors++;
		
		
		if (cell.isAlive())
			return !(neighbors < 2 || neighbors > 3);
		else 
			return neighbors == 3;
	}

	public void updateBoard() {
		
		for (int x = 0; x < width; x++) {
			for (int y = 0; y < height; y++) {
				nextState.get(y).set(x, getNextState(board.get(y).get(x).getModel()));
			}
		}
		for (int x = 0; x < width; x++) {
			for (int y = 0; y < height; y++) {
				board.get(y).get(x).getModel().setAlive(nextState.get(y).get(x));
			}
		}
		time++;
		
	}
	
	public Map<Position, CellModel> getReleventCells(){
		return releventCells;
	}

	public int getSpeed() {
		return speed;
	}

	public void setSpeed(int speed) {
		this.speed = speed;
	}

	public int getTime() {
		// TODO Auto-generated method stub
		return time;
	}

	public void updateNeighborsAlive(CellModel cell) {
		Position position = cell.getPosition();
		if (position.x - 1 >= 0) {
			int xPos = position.x-1;
			updateReleventCell(new Position(xPos, position.y), cell);
			if (position.y + 1 < height)
				updateReleventCell(new Position(xPos, position.y+1), cell);
			if (position.y - 1 >= 0)
				updateReleventCell(new Position(xPos, position.y-1), cell);
		} 
		
		if (position.x+1 < width) {
			int xPos = position.x-1;
			updateReleventCell(new Position(xPos, position.y), cell);
			if (position.y + 1 < height)
				updateReleventCell(new Position(xPos, position.y+1), cell);
			if (position.y - 1 >= 0)
				updateReleventCell(new Position(xPos, position.y-1), cell);
		}
		
		if (position.y - 1 >= 0) 
			updateReleventCell(new Position(position.x, position.y-1), cell);
		
		if (position.y + 1 < height)
			updateReleventCell(new Position(position.x, position.y-1), cell);
		
	}
	
	private void updateReleventCell(Position position, CellModel cell) {
		if (cell.isAlive()) {
			if (releventCells.containsKey(position)) releventCells.get(position).addNeighbor(cell);
			else {
				CellModel releventCell = new CellModel(position);
				releventCell.addNeighbor(cell);
				releventCells.put(releventCell.getPosition(), releventCell);
			}
		} else {
			if (releventCells.containsKey(position)) {
				CellModel releventCell = releventCells.get(position);
				if (!releventCell.isAlive()) {
					releventCell.removeNeighbor(cell);
					if (!releventCell.hasNeighbor()) releventCells.remove(releventCell.getPosition());
					if (!cell.hasNeighbor()) releventCells.remove(cell.getPosition());
				}
					
			}
		}
		
	}
	
//	public void updateNeighbors(CellPanel cell) throws NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
//		Position position = cell.getPosition();
//		
//		Method m = CellPanel.class.getDeclaredMethod((cell.isAlive() ? "addNeighbor" : "removeNeighbor"));
//		
//		
//		if (position.x - 1 >= 0) {
//			int xPos = position.x-1;
//			m.invoke(board.get(position.y).get(xPos));
//			
//			if (position.y - 1 >= 0)  
//				m.invoke(board.get(position.y-1).get(xPos));
//				
//			if (position.y + 1 < height)
//				m.invoke(board.get(position.y+1).get(xPos));
//			else if (offBoard.containsKey(new Position(xPos, position.y+1)))
//				m.invoke(offBoard.get(new Position(xPos, position.y+1)), args)
//
//		} else if (offBoard.containsKey(new Position(position.x-1, position.y))) {
//			
//		}
//		
//		if (position.x+1 < width) {
//			int xPos = position.x+1;
//			m.invoke(board.get(position.y).get(xPos));
//			if (position.y - 1 >= 0) {
//				m.invoke(board.get(position.y-1).get(xPos));
//			}
//			if (position.y + 1 < height)
//				m.invoke(board.get(position.y+1).get(xPos));
//		}
//		
//		if (position.y - 1 >= 0) 
//			m.invoke(board.get(position.y-1).get(position.x));
//		
//		if (position.y + 1 < height) 
//			m.invoke(board.get(position.y+1).get(position.x));
//		
//		
//
//	}

}
